#!/usr/bin/python3
#================================ rbreplay ===============================
"""
  @file     rbreplay

  @brief    Replays Surveillance recording rosbag file, video
            portion only from a yaml file specification. 

  @author   Patricio Vela,      pvela@gatech.edu
  @author   Yiye Chen,          yychen2019@gatech.edu

  @date     2022/07/01
"""
#================================ rbreplay ===============================

import os

import argparse 
from tqdm import tqdm

import cv2
import rospy
import rosbag
from cv_bridge import CvBridge

from camera.utils.display import display_images_cv 
from Surveillance.utils.specifications import specifications


#=============================== get_args ==============================
#
# Parse the single argument to get source yaml file.
#
def get_args():
  parser = argparse.ArgumentParser(
             description="Playback from Surveillance recording rosbag."
                         "The video is displayed to a window.")
  parser.add_argument("yfile", type=str, \
             help="The yaml file containing source data information.")
  args = parser.parse_args()
  return args


#============================= replay_video ============================
#
# Given the rosbag filename, load it and replay the video topic at
# half-size and 20fps.
#
def replay_video(rbfile, vtopic):
  
  bridge = CvBridge()                   # the ros-cv converter
  bag = rosbag.Bag(rbfile)         # the bag file

  # read the first frame to get the H and W
  for topic, msg, t in bag.read_messages(topics=vtopic):
    rgb = bridge.imgmsg_to_cv2(msg)[:,:,::-1]
    break

  # get frame rate
  num_frames = bag.get_message_count(vtopic)
  FPS = 20

  # get started
  print("Replaying rosbag camera video...")

  rgb = None
  bar = tqdm(total=num_frames)
  for topic, msg, t in bag.read_messages(topics=vtopic):
    rgb = bridge.imgmsg_to_cv2(msg) 

    display_images_cv([rgb[:,:,::-1]], ratio=0.5, \
                      window_name="Raw video from rosbag.")
    opKey = cv2.waitKey(int(1000 * 1./float(FPS)))
    if opKey == ord('q'):
      break
    bar.update(1)


#============================== __main __ ==============================
#
# Entry point to this python executable.
#
if __name__ == "__main__":
  args = get_args()                           # parse argument. 
  conf = specifications.load(args.yfile)      # load yaml specifications.

  print("Loading: " + conf.source.rosbag)
  replay_video(conf.source.rosbag, conf.surveillance.rgb_topic)

#
#================================ rbreplay ===============================
